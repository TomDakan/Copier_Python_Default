[project]
name = "Default"
version = "0.1.0"
description = "Main template for bootstrapping python projects with testing, linting/formatting, and docs generation."
authors = [
    {name = "Thomas Dakan", email = "tomdakan@gmail.com"},
]
dependencies = ["copier>=9.10.3", "pdm>=2.26.0"]
requires-python = ">=3.12"
readme = "README.md"
license = "MIT"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver2"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
changelog_file = "CHANGELOG.md"

[tool.pdm]
distribution = false

[tool.pdm.scripts]
# Generate a test project from the template in the current directory
generate = { cmd = "copier copy . ./test-output --force --trust --defaults -a run_install=false", help = "Generate a test project" }

# Run the QA suite inside the generated project
test-generated = { shell = "cd ./test-output/my_new_project && pdm install --dev && pdm run qa", help = "Install and run QA suite in the generated project" }

# Clean up the generated test directory
clean = { cmd = "rm -rf ./test-output", help = "Remove the generated test project" }

test-template = { composite = ["pdm install --dev", "generate", "test-generated", "clean"] }

safety-scan = { cmd = "pdm run safety scan", help = "Run a dependency vulnerability scan with safety" }

[tool.mypy]
python_version = "3.13"
mypy_path = "src"
strict = true

# Additional useful strictness checks
warn_unused_configs = true
warn_redundant_casts = true
warn_unreachable = true

# Show file/line numbers for errors
show_error_codes = true
pretty = true

# Relax rules for tests, which are often harder to type perfectly
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests"]
# Report issues of MEDIUM severity or higher
level = "MEDIUM"
# Report issues of MEDIUM confidence or higher
confidence = "MEDIUM"

[tool.ruff]
line-length = 90
target-version = "py313"
indent-width = 4
src = ["src"]

[tool.ruff.lint]
select = [
    "A", # strong, modern ruleset.
    "E","F","W", # Standard flake8
    "I", # isort (import sorting)
    "UP", # pyupgrade (modernize syntax)
    "B", # flake8-bugbear (common bugs)
    "A", # flake8-builtins (prevents shadowing)
    "C90", # mccabe (complexity)
    "SIM", # flake8-simplify (refactoring)
    "PERF", # perflint (performance)
    "RUF", # Ruff-specific rules
]

[tool.ruff.lint.per-file-ignores]
# Relax rules for tests, which commonly use 'assert'
"tests/*" = [
    "B018", # "useless-expression" - common in tests
    "S101", # "assert" - tests use assert
]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.pytest.ini_options]
minversion = "6.0"
# Add flags to run coverage on the 'tests' directory
addopts = "-ra -q"
testpaths = [
    "tests",
]

[tool.coverage.run]
omit = ["tests*"]

[tool.coverage.report]
# Optional: Fail the test run if coverage is below 100%
fail_under = 90
show_missing = true
[dependency-groups]
dev = [
    "commitizen>=4.9.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "copier>=9.10.3",
    "pytest-cov>=7.0.0",
    "jinja2-copier-extension>=0.1.0",
    "pdm>=2.26.0",
    "safety>=3.6.2",
    "pip-audit>=2.9.0",
    "python-semantic-release>=10.4.1",
]

[tool.semantic_release]
# Explicitly define the workflow: only tag and create a GitHub release.
release_branch_ops = ["tag", "vcs_release"]

# All other settings remain relevant
assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = false
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

