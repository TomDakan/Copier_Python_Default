_version: v1.0.0

_envops:
  block_start_string: '{%'
  block_end_string: '%}'
  variable_start_string: '{{'
  variable_end_string: '}}'

license:
  type: str
  help: Choose a license
  choices:
    - MIT
    - Apache-2.0
    - Proprietary
  default: MIT

cli:
  type: bool
  help: Include a Typer-based CLI?
  default: false

python_version:
  type: str
  help: Python version for your project
  default: "3.13"

project_name:
  type: str
  help: What is your project name?
  default: My New Project
  validator: |
    {% if project_name|length < 4 or project_name|length > 40 %}
    project_name must be between 4 and 40 characters
    {% endif %}

project_slug:
  type: str
  help: "The name for the project directory (e.g., 'my-new-project'). This must be different from the module_name."
  # The default value is computed from project_name. The user can accept or edit it.
  default: "{{ project_name | lower | replace(' ', '-') }}"
  validator: |
    {% if not (project_slug | regex_search('^[a-z][a-z0-9-]+$')) %}
      ''{{ project_slug }}' is not a valid project slug. It must start with a lowercase letter, and contain only lowercase letters, numbers, and hyphens.
    {% endif %}

module_name:
  type: str
  help: What is the Python module name?
  default: "{{ project_slug.replace('-', '_') }}"
  validator: |
    {% if module_name|length < 4 or module_name|length > 40 %}
    module_name must be between 4 and 40 characters
    {% endif %}
    {% if not (module_name | regex_search('^[a-z][a-z0-9_]+$')) %}
    module_name must start with a letter, followed one or more letters, digits or underscores (all lowercase).
    {% endif %}
    {% if module_name == project_slug %}
    module_name cannot be the same as project_slug (e.g., 'my-project' vs 'my_project'). This can cause Python import conflicts.
    {% endif %}

project_summary:
  type: str
  help: Provide a short summary of the project.
  default: "A short summary of {{ project_name }}"

author_name:
  type: str
  help: Author name
  default: Tom Dakan

description:
  type: str
  help: Project description
  default: A description of my new project.

version:
  type: str
  help: Initial version
  default: 0.1.0

run_qa_checks:
  type: bool
  help: Should I run quality checks after building?
  default: false

precommit_install:
  type: bool
  help: Install pre-commit hooks after generation?
  default: false

docker_support:
  type: bool
  help: Include docker-compose support?
  default: false

initialize_git:
  type: bool
  help: Should I initialize this project as a git repository?
  default: false

line_length:
  type: int
  help: "What line length do you want to use for code formatting and linting?"
  default: 90
  choices:
    - 90
    - 120

push_to_github:
  type: bool
  help: Should I publish this project to github?
  default: "{{ initialize_git }}"
  when: "{{ initialize_git }}"

github_account:
  type: str
  help: What is the github account I should use?
  default: TomDakan
  when: "{{ push_to_github }}"

task_runner:
  type: str
  help: "Which task runner do you want to use?"
  choices: ["pdm", "just"]
  default: "pdm"

use_semantic_release:
  type: bool
  help: Use python-semantic-release for automated releases? (Replaces manual 'cz bump')
  default: false

use_safety:
  type: bool
  help: Include 'safety' for dependency vulnerability checks?
  default: false

use_bandit:
  type: bool
  help: Include 'bandit' for security linting?
  default: false

use_dependabot:
  type: bool
  help: Include Dependabot configuration for automated dependency updates?
  default: true

badges:
  type: bool
  help: Add README badges (build, coverage, docs)?
  default: false
  when: doc_hosting_provider != None

badge_build:
  type: str
  help: Build badge markdown (leave blank to skip)
  default: ""
  when: badges

badge_coverage:
  type: str
  help: Coverage badge markdown (leave blank to skip)
  default: ""
  when: badges

badge_docs:
  type: str
  help: Docs badge markdown (leave blank to skip)
  default: ""
  when: badges

# --- Project Dependencies ---
tool_typer:
  default:
    - name: "typer[all]"
      desc: "For building a CLI (if included)."
  when: false

tool_rich:
  default:
    - name: "rich"
      desc: "For rich text and formatting in the CLI (if included)."
  when: false

tool_pydantic_settings:
  default:
    - name: "pydantic-settings"
      desc: "For managing application settings via environment variables."
  when: false

project_tools:
  default: >-
    {% set tools = [] %}  # <--- FIX 1: Start with an empty list
    {% set _ = tools.extend(tool_pydantic_settings) %} # <--- FIX 2: Extend it

    {% if cli %}
      {%   set tools = tools + tool_typer + tool_rich %}
    {% endif %}

    {{ tools }}
  when: false

# --- Development & Code Quality Tools ---
tool_pytest:
  default:
    - name: "pytest"
      desc: "For running the test suite."
  when: false

tool_pytest_cov:
  default:
    - name: "pytest-cov"
      desc: "For measuring test coverage."
  when: false

tool_ruff:
  default:
    - name: "ruff"
      desc: "All-in-one linter, formatter, and import sorter."
  when: false

tool_commitizen:
  default:
    - name: "commitizen"
      desc: "For standardized, conventional commit messages."
  when: false

tool_mypy:
  default:
    - name: "mypy"
      desc: "For static type checking."
  when: false

tool_semantic_release:
  default:
    - name: "python-semantic-release"
      desc: "For automated versioning, changelog generation, and releases (used in CI)."
  when: false

tool_safety:
  default:
    - name: "safety"
      desc: "For checking dependencies against known security vulnerabilities."
  when: false

tool_bandit:
  default:
    - name: "bandit"
      desc: "For finding common security issues in code."
  when: false

# assemble final dev tools list for use in templates
dev_tools:
  default: >-
    {% set base_tools = [] %}

    {% set base_tools =
        tool_pytest +
        tool_pytest_cov +
        tool_ruff +
        tool_commitizen +
        tool_mypy
    %}

    {% if cli %}
      {% set base_tools = base_tools + tool_typer + tool_rich %}
    {% endif %}
    {% if use_safety %}
      {% set base_tools = base_tools + tool_safety %}
    {% endif %}
    {% if use_bandit %}
      {% set base_tools = base_tools + tool_bandit %}
    {% endif %}
    {% if use_semantic_release %}
      {% set base_tools = base_tools + tool_semantic_release %}
    {% endif %}
    {{ base_tools }}
  when: false

# --- Documentation Tools ---
# Questions
use_docs:
  type: bool
  help: Include documentation generation with MkDocs?
  default: true

use_mkdocstrings:
  type: bool
  help: Include mkdocstrings for automatic API documentation?
  default: true
  when: use_docs

doc_hosting_provider:
  type: str
  help: Where will the documentation be hosted?
  choices:
    - "None"
    - Read the Docs
  default: "None"
  when: use_docs

# tool defintions
tool_mkdocs:
  default:
    - name: "mkdocs"
      desc: "A static site generator for project documentation."
  when: false
tool_mkdocs_material:
  default:
    - name: "mkdocs-material"
      desc: "Theme for MkDocs."
  when: false
tool_mkdocstrings:
  default:
    - name: "mkdocstrings[python]"
      desc: "For automatically generating API documentation from docstrings."
  when: false

# assemble final doc tools list for use in templates
doc_tools:
  default: >-
    {% set base_tools = [] %}
    {% if use_docs %}
      {% set base_tools = base_tools + tool_mkdocs + tool_mkdocs_material %}
    {% endif %}
    {% if use_docs and use_mkdocstrings %}
      {% set base_tools = base_tools + tool_mkdocstrings %}
    {% endif %}
    {{ base_tools }}
  when: false

# --- Pytest Markers ---
pytest_marker_definitions:
  when: false  # This makes it a data-only variable
  default:
    unit:
      name: "unit"
      desc: "Marks fast, self-contained unit tests."
    integration:
      name: "integration"
      desc: "Marks tests that require external resources (e.g., database, network)."
    slow:
      name: "slow"
      desc: "Marks tests that are slow to run."
    cli:
      name: "cli"
      desc: "Marks tests for the command-line interface."
    network:
      name: "network"
      desc: "Marks tests that require a live network connection."

# --- Questions ---
pytest_markers:
  type: yaml
  help: "Select pytest markers to include in the project."
  choices:
    # These choices are now keys for the dictionary above
    - unit
    - integration
    - slow
    - cli
    - network
  default:
    - unit
  multiselect: true

# --- Task Runner Scripts ---
# --- Internal Data: Script Definitions ---
scripts_base:
  when: false
  default:
    format-check:
      help: "Check if code formatting is correct (Ruff)."
      cmd: "ruff format . --check"
    format:
      help: "Apply code formatting (Ruff)."
      cmd: "ruff format ."
    lint:
      help: "Run the linter and import sorter (Ruff)."
      cmd: "ruff check . --fix"
    type-check:
      help: "Run static type checking (MyPy)."
      cmd: "mypy ."
    test:
      help: "Run the test suite (pytest)."
      cmd: "pytest"
    deploy:
      help: "Placeholder for deployment tasks."
      cmd: "echo 'Deploying...'"

script_safety:
  when: false
  default:
    safety-check:
      help: "Check for known security vulnerabilities in dependencies."
      cmd: "safety check"

script_bandit:
  when: false
  default:
    bandit-check:
      help: "Run Bandit security linter."
      cmd: "bandit -r src"

script_docs_rtd:
  when: false
  default:
    export-docs-reqs:
      help: "Export documentation dependencies for Read the Docs."
      cmd: "pdm export --group docs --without-hashes -o docs-requirements.txt"

script_adr:
  when: false
  default:
    adr:
      help: "Create a new Architecture Decision Record."
      cmd: "{{ _copier_python }} scripts/new_adr.py"

include_adr:
  type: bool
  help: Include a script for managing Architecture Decision Records (ADRs)?
  default: false

# --- Public Variable for Jinja Templates ---
scripts:
  when: false 
  default: |
    {# 1. Start with the base scripts dictionary. This now works! #}
    {% set final_scripts = {} %}
    {% set _ = final_scripts.update(scripts_base) %}
    
    {# 2. Conditionally add optional scripts. This also works. #}
    {% if use_safety %}
      {% set _ = final_scripts.update(script_safety) %}
    {% endif %}
    {% if use_bandit %}
      {% set _ = final_scripts.update(script_bandit) %}
    {% endif %}
    {% if doc_hosting_provider == 'Read the Docs'%}
      {% set _ = final_scripts.update(script_docs_rtd) %}
    {% endif %}
    {% if include_adr %}
      {% set _ = final_scripts.update(script_adr) %}
    {% endif %}
    
    {# 3. Build the composite 'qa' task list dynamically #}
    {% set qa_tasks = ['format-check', 'lint', 'type-check', 'test'] %}
    {% if use_safety %}
      {% set qa_tasks = qa_tasks + ['safety-check'] %}
    {% endif %}
    {% if use_bandit %}
      {% set qa_tasks = qa_tasks + ['bandit-check'] %}
    {% endif %}
    
    {# 4. Create and add the final 'qa' script to the dictionary #}
    {% set qa_script = {
        'qa': {
          'help': 'Run the full quality assurance suite.',
          'composite': qa_tasks
        }
      } %}
    {% set _ = final_scripts.update(qa_script) %}
    
    {# 5. Output the complete, filtered dictionary #}
    {{ final_scripts | to_yaml }}

_subdirectory: template

_exclude:
  - "{% if not generate_env %}{{ project_slug }}/.env.jinja{% endif %}"

  - "{% if not docker_support %}{{ project_slug }}/docker-compose.yml.jinja{% endif %}"

  - "{% if not cli %}{{ project_slug }}/src/{{ module_name }}/cli/__main__.py.jinja{% endif %}"

  # Conditionally exclude security tools
  - "{% if not use_semantic_release %}{{ project_slug }}/.github/workflows/release.yaml.jinja{% endif %}"

  - "{% if not task_runner == 'just' %}{{ project_slug }}/justfile{% endif %}"

_tasks:
  - command: python bootstrap.py
    when: not _copier_conf.is_update

  - command: echo "Exporting documentation requirements for Read the Docs..."
    when: not _copier_conf.is_update and doc_hosting_provider == 'Read the Docs'
  - command: pdm run export-docs-reqs
    when: not _copier_conf.is_update and doc_hosting_provider == 'Read the Docs'

  - command: echo "Removing bootstrap script..."
    when: not _copier_conf.is_update
  - command: python -c "import os; os.remove('bootstrap.py')"
    when: not _copier_conf.is_update

  - echo "Project {{ project_name }} generated with Copier!"